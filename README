OMNIPLAY

1) Get the required software

Omniplay runs on the 12.04.x long term Ubuntu Linux distribution.  You must install the 32-bit
version.

2) Obtain the omniplay source code

Check the source out from the CVS repository on endplay.eecs.umich.edu
$ cvs -d endplay.eecs.umich.edu:/home/cvs-archive co omniplay

This will create a number of sub-directories that contain the user-level and kernel source
for omniplay.

3) Build and install

Assuming that <omniplay> is the root directory where you installed the source:

3.1) Build the Omniplay kernel 

$ cd <omniplay>/linux-lts-quantal-3.5.0
$ make menuconfig
$ make
$ sudo make modules_install
$ sudo make install
$ sudo reboot

After rebooting, you should be running the Omniplay kernel.

3.2) Build glibc
$ cd <omniplay>/eglibc-2.15/
$ mkdir build
$ mkdir prefix
$ cd build
$ ../configure -prefix=<tree>/eglibc-2.15/prefix --disable-profile --enable-add-on --without-gd --without-selinux --without-cvs --enable-kernel=3.2.0
$ make
$ mkdir /var/db
$ chown <user> /var/db
$ touch ../prefix/etc/ld.so.conf
$ make install

This installs the Omniplay glibc in eglibc-2.15/prefix.  This is a bit
of a kludge that allows us to develop code with the standard glibc and
test with the Omniplay glibc.  There are a few complications, though,
that we need to fix:

$ cd <omniplay>/eglibc-2.15/prefix
$ ln -s /usr/lib/locale

3.3) Build the tools

$ cd <omniplay>/test/dev
$ make
$ cd ..
$ make

4) Record and replay

After each reboot, you need to load the Omniplay kernel module and do some setup work:

$ cd <omniplay>/test
$ ./setup.sh

Now you can record programs.  You will need to know your dynamic link path.  You can
look in /etc/ld.so.conf.d/ to figure this out.  A typical path might be:
/lib/i386-linux-gnu:/usr/lib/i386-linux-gnu:/usr/local/lib:/usr/lib:/lib

One you determine this, you can record a program by knowing its fully-qualified pathname

$ ./launcher --pthread <omniplay>/eglibc-2.15/prefix/lib:<libpath> <fq program> <args>

This will record the execution of that program, as well as any children spawned by that program.
So, an easy way to record programs is just to launch a shell that is replayed.  Anything started
from that shell will also  be replayed:

$ ./launcher --pthread <omniplay>/eglibc-2.15/prefix/lib:<libpath> /bin/bash

You should now see that the following directories are being populated:

/replay_logdb: 

This contains the logs of non-determinism plus the initial
checkpoints.  Each directory is a separate replay group named with an
id that increments over time.  Within each directory you should see
klog* files (which are kernel-level nondeterminism), ulog* files
(which are user-level nondeterminism) and ckpt files (the initial
checkpoints).

A new replay group is created on each successful exec.  The replay
group contains all threads and processes spawned by the execed process
(up to the point where they do execs and start new replay groups)

/replay_cache: 

This is a copy-on-read cache of file data.  Cache files are named by
device and inode number.  If a file changes over time, past versions
are additionally named by their respective modification times.

You can replay a given group with id <id> as follows:

$ ./resume /replay_logdir/rec_<id> -pthread <omniplay>/src/omniplay/eglibc-2.15/prefix/lib

Keep in mind that a recording process can not initiate a replay.  So,
do this from some shell other than the recording bash shell that you
started above.  Also, a recording must finish in order for you to
replay it successfully.

A successful replay will print the message "Goodbye, cruel lamp! This
replay is over" in the kernel log (use dmesg to check).  An
unsuccessful replay may or may not print this message.  It will also
print out error messages in any event.

If you would like a simpler way to replay all groups from id <m> to <n>, try:
$ ./testall.py <m> <n>

(omitting the last <n> argument replays everything from m onward).   The replaying
will stop if any replay was unsuccessful.

5) Debugging and tools

Use parseklog to examine a kernel log.
$ omniplay/test/parseklog /tmp/logs/klog.id.* > parsed_klog


Building Firefox:
Dependencies (apt-get install these first)
autoconf2.13
autotools-dev
cdbs
dbus-x11
debhelper (>= 7)
hardening-wrapper
libasound2-dev
libcurl4-openssl-dev
libdbus-glib-1-dev (>= 0.60)
libfontconfig1-dev
libfreetype6-dev (>= 2.0.1)
libgconf2-dev (>= 1.2.1)
libglib2.0-dev (>= 2.18)
libgnomeui-dev (>= 2.2.0)
libgtk2.0-dev (>= 2.14)
libiw-dev
libnotify-dev (>= 0.4)
libpango1.0-dev (>= 1.14.0)
libstartup-notification0-dev
libx11-dev
libxext-dev
libxrender-dev
libxt-dev
locales
lsb-release
mesa-common-dev
python (>= 2.7)
quilt
unzip
xvfb
yasm (>= 1.1)
zip

Use the .mzconfig file.
$ make -f client.mk build
